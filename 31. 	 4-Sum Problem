//brute is to run 4 loops and find the values of i,j,k,l; O(n^4), O(n^2)for the set ds


//better is to use 3 loops and se ds, finding target, O(n^3logN),O(2 * no. of the quadruplets)+O(N)


//optimal is to sort arr, run 2 loops, O(N3),store in a ans vector 
#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        int n = nums.size();
        if (n < 4) return ans;
        
        sort(nums.begin(), nums.end());
        
        for (int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue; // Skip duplicate for i
            
            for (int j = i + 1; j < n - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue; // Skip duplicate for j
                
                int k = j + 1;
                int l = n - 1;
                
                while (k < l) {
                    long long sum = static_cast<long long>(nums[i]) + nums[j] + nums[k] + nums[l];
                    
                    if (sum == target) {
                        ans.push_back({nums[i], nums[j], nums[k], nums[l]});
                        k++;
                        l--;
                        
                        while (k < l && nums[k] == nums[k - 1]) k++; 
                        while (k < l && nums[l] == nums[l + 1]) l--; 
                    } else if (sum < target) {
                        k++;
                    } else {
                        l--;
                    }
                }
            }
        }
        
        return ans;
    }
};
